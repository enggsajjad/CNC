##############################################
#      BASIC UCF SYNTAX EXAMPLES V2.1.5      #
##############################################
#
#              TIMING SPECIFICATIONS
#
# Timing specifications can be applied to the entire device (global) or to
# specific groups of login in your PLD design (called "time groups').
# The time groups are declared in two basic ways.
#
# Method 1: Based on a net name, where 'my_net' is a net that touchs all the
#           logic to be grouped in to 'logic_grp'. Example:
#NET my_net TNM_NET = logic_grp ;
#
# Method 2: Group uing the key word 'TIMEGRP' and declare using the names of
#           logic in your design. Example:
#TIMEGRP group_name = FFS ("U1/*");
#           creates a group called 'group_name' for all flip-flops with in
#           the hierarchical block called U1. Wildcards are valid.
#
# Grouping is very important because it lets you tell the software which parts
# of a design run at which speeds.  For the majority of the designs with only
# one clock the very simple global constraints.
#
# The type of grouping constraint you use can vary depending on the synthesis
# tools you are using.  For example, Synplicity does well with Method 1, while
# FPGA Express does beter with Method 2.
#
#
############################################################
# Internal to the device clock speed specifications - Tsys #
############################################################
#
# data      _________      /^^^^^\       _________   out
# ----------| D   Q |-----{ LOGIC } -----| D   Q |------
#           |       |      \vvvvv/       |       |
#        ---|> CLK  |                 ---|> CLK  |
# clock  |  ---------                 |  ---------
# ------------------------------------
#
# ---------------
# Single Clock
# ---------------
#
# ----------------
# PERIOD TIME-SPEC
# ----------------
# The PERIOD spec. covers all timing paths that start or end at a
# register, latch, or synchronous RAM which are clocked by the reference
# net (excluding pad destinations).  Also covered is the setup
# requirement of the synchronous element relative to other elements
# (ex. flip flops, pads, etc...).
# NOTE:  The default unit for time is nanoseconds.
#
#NET clock PERIOD = 50ns ;
#
#       -OR-
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
# FROM:TO style timespecs can be used to constrain paths between time
# groups.  NOTE:  Keywords:  RAMS, FFS, PADS, and LATCHES are predefined
# time groups used to specify all elements of each type in a design.
#TIMEGRP RFFS = RISING FFS ("*");  // creates a rising group called RFFS
#TIMEGRP FFFS = FALLING FFS ("*");  // creates a falling group called FFFS
#TIMESPEC TSF2F  = FROM : FFS   : TO : FFS   : 50 ns; // Flip-flips with the same edge
#TIMESPEC TSR2F  = FROM : RFFS  : TO : FFFS  : 25 ns; // rising edge to falling edge
#TIMESPEC TSF2R  = FROM : FFFS  : TO : RFFS  : 25 ns; // falling edge to rising edge
#
# ---------------
# Multiple Clocks
# ---------------
# Requires a combination of the 'Period' and 'FROM:TO' type time specifications
#NET clock1 TNM_NET = clk1_grp ;
#NET clock2 TNM_NET = clk2_grp ;
#
#TIMESPEC TS_clk1 = PERIOD : clk1_grp : 50 ;
#TIMESPEC TS_clk2 = PERIOD : clk2_grp : 30 ;
#TIMESPEC TS_ck1_2_ck2 = FROM : clk1_grp : TO : clk2_grp : 50 ;
#TIMESPEC TS_ck2_2_ck1 = FROM : clk2_grp : TO : clk1_grp : 30 ;
#
#
############################################################
# CLOCK TO OUT specifications - Tco                        #
############################################################
#
# from      _________      /^^^^^\       --------\
# ----------| D   Q |-----{ LOGIC } -----| Pad    >
# PLD       |       |      \vvvvv/       --------/
#        ---|> CLK  |
# clock  |  ---------
# --------
#
# ----------------
# OFFSET TIME-SPEC
# ----------------
# To automatically include clock buffer/routing delay in your
# clock-to-out timing specifications, use OFFSET constraints .
# For an output where the maximum clock-to-out (Tco) is 25 ns:
#NET out_net_name OFFSET = OUT 25 AFTER clock_net_name ;
#
#      -OR-
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
#TIMESPEC TSF2P  = FROM : FFS   : TO : PADS  : 25 ns;
# Note that FROM: FFS : TO: PADS constraints start the delay analysis
# at the flip flop itself, and not the clock input pin.  The recommended
# method to create a clock-to-out constraint is to use an OFFSET constraint.
#
#
############################################################
# Pad to Flip-Flop speed specifications - Tsu              #
############################################################
#
# ------\         /^^^^^\       _________   into PLD
# |pad   >-------{ LOGIC } -----| D   Q |------
# ------/         \vvvvv/       |       |
#                            ---|> CLK  |
# clock                      |  ---------
# ----------------------------
#
# ----------------
# OFFSET TIME-SPEC
# ----------------
# To automatically account for clock delay in your input setup timing
# specifications, use OFFSET constraints.
# For an input where the maximum setup time is 25 ns:
#NET in_net_name OFFSET = IN 25 BEFORE clock_net_name ;
#
#      -OR-
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
#TIMESPEC TSP2F  = FROM : PADS  : TO : FFS   : 25 ns;
# Note that FROM: PADS : TO: FFS constraints do not take into account any
# delay for the clock path.  The recommended method to create an input
# setup time constraint is to use an OFFSET constraint.
#
#
############################################################
# Pad to Pad speed specifications - Tpd                    #
############################################################
#
# ------\         /^^^^^\       -------\
# |pad   >-------{ LOGIC } -----| pad   >
# ------/         \vvvvv/       -------/
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
#TIMESPEC TSP2P  = FROM : PADS  : TO : PADS  : 125 ns;
#
#
############################################################
# Other timing specifications                              #
############################################################
#
# -------------
# TIMING IGNORE
# -------------
# If you can ignore timing of paths, use Timing Ignore (TIG). NOTE: The
# "*" character is a wild-card which can be used for bus names.  A "?"
# character can be used to wild-card one character.
# Ignore timing of net reset_n:
#NET : reset_n : TIG ;
#
# Ignore data_reg(7:0) net in instance mux_mem:
#NET : mux_mem/data_reg* : TIG ;
#
# Ignore data_reg(7:0) net in instance mux_mem as related to a TIMESPEC
# named TS01 only:
#NET : mux_mem/data_reg* : TIG = TS01 ;
#
# Ignore data1_sig and data2_sig nets:
#NET : data?_sig : TIG ;
#
# ---------------
# PATH EXCEPTIONS
# ---------------
# If your design has outputs that can be slower than others, you can
# create specific timespecs similar to this example for output nets
# named out_data(7:0) and irq_n:
#TIMEGRP slow_outs = PADS(out_data* : irq_n) ;
#TIMEGRP fast_outs = PADS : EXCEPT : slow_outs ;
#TIMESPEC TS08 = FROM : FFS : TO : fast_outs : 22 ;
#TIMESPEC TS09 = FROM : FFS : TO : slow_outs : 75 ;
#
# If you have multi-cycle FF to FF paths, you can create a time group
# using either the TIMEGRP or TNM statements.
#
# WARNING:  Many VHDL/verilog synthesizers do not predictably name flip
# flop Q output nets.  Most synthesizers do assign predictable instance
# names to flip flops, however.
#
# TIMEGRP example:
#TIMEGRP slowffs = FFS(inst_path/ff_q_output_net1* :
#inst_path/ff_q_output_net2*);
#
# TNM attached to instance example:
#INST inst_path/ff_instance_name1_reg* TNM = slowffs ;
#INST inst_path/ff_instance_name2_reg* TNM = slowffs ;
#
# If a FF clock-enable is used on all flip flops of a multi-cycle path,
# you can attach TNM to the clock enable net.  NOTE:  TNM attached to a
# net "forward traces" to any FF, LATCH, RAM, or PAD attached to the
# net.
#NET ff_clock_enable_net TNM = slowffs ;
#
# Example of using "slowffs" timegroup, in a FROM:TO timespec, with
# either of the three timegroup methods shown above:
#TIMESPEC TS10 = FROM : slowffs : TO : FFS : 100 ;
#
# Constrain the skew or delay associate with a net.
#NET any_net_name MAXSKEW = 7 ;
#NET any_net_name MAXDELAY = 20 ns;
#
#
# Constraint priority in your .ucf file is as follows:
#
#    highest 1.  Timing Ignore (TIG)
#                 2.  FROM : THRU : TO specs
#             3.  FROM : TO specs
#    lowest  4.  PERIOD specs
#
# See the on-line "Library Reference Guide" document for
# additional timespec features and more information.
#
#
############################################################
#                                                                                                                    #
#         LOCATION and ATTRIBUTE SPECIFICATIONS                        #
#                                                                                                                    #
############################################################
# Pin and CLB location locking constraints                 #
############################################################
#
# -----------------------
# Assign an IO pin number
# -----------------------
#INST io_buf_instance_name  LOC = P110 ;
#NET io_net_name  LOC = P111 ;
#
# -----------------------
# Assign a signal to a range of I/O pins
# -----------------------
#NET "signal_name" LOC=P32, P33, P34;
#
# -----------------------
# Place a logic element(called a BEL) in a specific CLB location.  BEL = FF, LUT, RAM, etc...
# -----------------------
#INST instance_path/BEL_inst_name  LOC = CLB_R17C36 ;
#
# -----------------------
# Place CLB in rectangular area from CLB R1C1 to CLB R5C7
# -----------------------
#INST /U1/U2/reg<0> LOC=clb_r1c1:clb_r5c7;
#
# -----------------------
# Place Heirarchial logic block in rectangular area from CLB R1C1 to CLB R5C7
# -----------------------
#INST /U1* LOC=clb_r1c1:clb_r5c7;
#
# -----------------------
# Prohibit IO pin P26 or CLBR5C3 from being used:
# -----------------------
#CONFIG PROHIBIT = P26 ;
#CONFIG PROHIBIT = CLB_R5C3 ;
# Config Prohibit is very important for frocing the software to not use critical
# configuration pins like INIT or DOUT on the FPGA.  The Mode pins and JTAG
# Pins require a special pad so they will not be availabe to this constraint
#
# -----------------------
# Assign an OBUF to be FAST or SLOW:
# -----------------------
#INST obuf_instance_name FAST ;
#INST obuf_instance_name SLOW ;
#
# -----------------------
# FPGAs only:  IOB input Flip-flop delay specifcation
# -----------------------
# Declare an IOB input FF delay (default = MAXDELAY).
# NOTE:  MEDDELAY/NODELAY can be attached to a CLB FF that is pushed
# into an IOB by the "map -pr i" option.
#INST input_ff_instance_name MEDDELAY ;
#INST input_ff_instance_name NODELAY ;
#
# -----------------------
# Assign Global Clock Buffers Lower Left Right Side
# -----------------------
# INST gbuf1 LOC=SSW
#
# #
NET "lclk" TNM_NET = "lclk";
TIMESPEC "TS_lclk" = PERIOD "lclk" 15 ns HIGH 50 %;
NET "synclk" TNM_NET = "synclk";
TIMESPEC "TS_synclk" = PERIOD "synclk" 20 ns HIGH 50 %;
NET "ads" LOC = "p98";
NET "int" LOC = "p112";
NET "iobits<0>" LOC = "p96";
NET "iobits<1>" LOC = "p94";
NET "iobits<2>" LOC = "p89";
NET "iobits<3>" LOC = "p87";
NET "iobits<4>" LOC = "p84";
NET "iobits<5>" LOC = "p82";
NET "iobits<6>" LOC = "p75";
NET "iobits<7>" LOC = "p73";
NET "iobits<8>" LOC = "p70";
NET "iobits<9>" LOC = "p68";
NET "iobits<10>" LOC = "p63";
NET "iobits<11>" LOC = "p61";
NET "iobits<12>" LOC = "p59";
NET "iobits<13>" LOC = "p57";
NET "iobits<14>" LOC = "p48";
NET "iobits<15>" LOC = "p46";
NET "iobits<16>" LOC = "p44";
NET "iobits<17>" LOC = "p42";
NET "iobits<18>" LOC = "p37";
NET "iobits<19>" LOC = "p35";
NET "iobits<20>" LOC = "p33";
NET "iobits<21>" LOC = "p30";
NET "iobits<22>" LOC = "p27";
NET "iobits<23>" LOC = "p23";
NET "iobits<24>" LOC = "p95";
NET "iobits<25>" LOC = "p90";
NET "iobits<26>" LOC = "p88";
NET "iobits<27>" LOC = "p86";
NET "iobits<28>" LOC = "p83";
NET "iobits<29>" LOC = "p81";
NET "iobits<30>" LOC = "p74";
NET "iobits<31>" LOC = "p71";
NET "iobits<32>" LOC = "p69";
NET "iobits<33>" LOC = "p67";
NET "iobits<34>" LOC = "p62";
NET "iobits<35>" LOC = "p60";
NET "iobits<36>" LOC = "p58";
NET "iobits<37>" LOC = "p49";
NET "iobits<38>" LOC = "p47";
NET "iobits<39>" LOC = "p45";
NET "iobits<40>" LOC = "p43";
NET "iobits<41>" LOC = "p41";
NET "iobits<42>" LOC = "p36";
NET "iobits<43>" LOC = "p34";
NET "iobits<44>" LOC = "p31";
NET "iobits<45>" LOC = "p29";
NET "iobits<46>" LOC = "p24";
NET "iobits<47>" LOC = "p22";
NET "iobits<48>" LOC = "p181";
NET "iobits<49>" LOC = "p187";
NET "iobits<50>" LOC = "p188";
NET "iobits<51>" LOC = "p189";
NET "iobits<52>" LOC = "p191";
NET "iobits<53>" LOC = "p192";
NET "iobits<54>" LOC = "p193";
NET "iobits<55>" LOC = "p194";
NET "iobits<56>" LOC = "p195";
NET "iobits<57>" LOC = "p199";
NET "iobits<58>" LOC = "p200";
NET "iobits<59>" LOC = "p201";
NET "iobits<60>" LOC = "p202";
NET "iobits<61>" LOC = "p203";
NET "iobits<62>" LOC = "p204";
NET "iobits<63>" LOC = "p205";
NET "iobits<64>" LOC = "p206";
NET "iobits<65>" LOC = "p3";
NET "iobits<66>" LOC = "p4";
NET "iobits<67>" LOC = "p5";
NET "iobits<68>" LOC = "p6";
NET "iobits<69>" LOC = "p7";
NET "iobits<70>" LOC = "p8";
NET "iobits<71>" LOC = "p9";
NET "lad<0>" LOC = "p153";
NET "lad<1>" LOC = "p146";
NET "lad<2>" LOC = "p142";
NET "lad<3>" LOC = "p135";
NET "lad<4>" LOC = "p126";
NET "lad<5>" LOC = "p119";
NET "lad<6>" LOC = "p115";
NET "lad<7>" LOC = "p108";
NET "lad<8>" LOC = "p174";
NET "lad<9>" LOC = "p173";
NET "lad<10>" LOC = "p172";
NET "lad<11>" LOC = "p168";
NET "lad<12>" LOC = "p167";
NET "lad<13>" LOC = "p166";
NET "lad<14>" LOC = "p165";
NET "lad<15>" LOC = "p164";
NET "lad<16>" LOC = "p163";
NET "lad<17>" LOC = "p162";
NET "lad<18>" LOC = "p152";
NET "lad<19>" LOC = "p151";
NET "lad<20>" LOC = "p150";
NET "lad<21>" LOC = "p149";
NET "lad<22>" LOC = "p148";
NET "lad<23>" LOC = "p147";
NET "lad<24>" LOC = "p141";
NET "lad<25>" LOC = "p140";
NET "lad<26>" LOC = "p139";
NET "lad<27>" LOC = "p138";
NET "lad<28>" LOC = "p136";
NET "lad<29>" LOC = "p134";
NET "lad<30>" LOC = "p133";
NET "lad<31>" LOC = "p132";
NET "lclk" LOC = "p182";
NET "leds<0>" LOC = "p10";
NET "leds<1>" LOC = "p14";
NET "leds<2>" LOC = "p15";
NET "leds<3>" LOC = "p16";
NET "leds<4>" LOC = "p17";
NET "leds<5>" LOC = "p18";
NET "leds<6>" LOC = "p20";
NET "leds<7>" LOC = "p21";
NET "lrd" LOC = "p100";
NET "lwr" LOC = "p160";
NET "ready" LOC = "p102";
NET "synclk" LOC = "p185";
NET "int" FAST;
NET "int" DRIVE = 24;
NET "iobits<0>" SLOW;
NET "iobits<1>" SLOW;
NET "iobits<2>" SLOW;
NET "iobits<3>" SLOW;
NET "iobits<4>" SLOW;
NET "iobits<5>" SLOW;
NET "iobits<6>" SLOW;
NET "iobits<7>" SLOW;
NET "iobits<8>" SLOW;
NET "iobits<9>" SLOW;
NET "iobits<10>" SLOW;
NET "iobits<11>" SLOW;
NET "iobits<12>" SLOW;
NET "iobits<13>" SLOW;
NET "iobits<14>" SLOW;
NET "iobits<15>" SLOW;
NET "iobits<16>" SLOW;
NET "iobits<17>" SLOW;
NET "iobits<18>" SLOW;
NET "iobits<19>" SLOW;
NET "iobits<20>" SLOW;
NET "iobits<21>" SLOW;
NET "iobits<22>" SLOW;
NET "iobits<23>" SLOW;
NET "iobits<24>" SLOW;
NET "iobits<25>" SLOW;
NET "iobits<26>" SLOW;
NET "iobits<27>" SLOW;
NET "iobits<28>" SLOW;
NET "iobits<29>" SLOW;
NET "iobits<30>" SLOW;
NET "iobits<31>" SLOW;
NET "iobits<32>" SLOW;
NET "iobits<33>" SLOW;
NET "iobits<34>" SLOW;
NET "iobits<35>" SLOW;
NET "iobits<36>" SLOW;
NET "iobits<37>" SLOW;
NET "iobits<38>" SLOW;
NET "iobits<39>" SLOW;
NET "iobits<40>" SLOW;
NET "iobits<41>" SLOW;
NET "iobits<42>" SLOW;
NET "iobits<43>" SLOW;
NET "iobits<44>" SLOW;
NET "iobits<45>" SLOW;
NET "iobits<46>" SLOW;
NET "iobits<47>" SLOW;
NET "iobits<48>" SLOW;
NET "iobits<49>" SLOW;
NET "iobits<50>" SLOW;
NET "iobits<51>" SLOW;
NET "iobits<52>" SLOW;
NET "iobits<53>" SLOW;
NET "iobits<54>" SLOW;
NET "iobits<55>" SLOW;
NET "iobits<56>" SLOW;
NET "iobits<57>" SLOW;
NET "iobits<58>" SLOW;
NET "iobits<59>" SLOW;
NET "iobits<60>" SLOW;
NET "iobits<61>" SLOW;
NET "iobits<62>" SLOW;
NET "iobits<63>" SLOW;
NET "iobits<64>" SLOW;
NET "iobits<65>" SLOW;
NET "iobits<66>" SLOW;
NET "iobits<67>" SLOW;
NET "iobits<68>" SLOW;
NET "iobits<69>" SLOW;
NET "iobits<70>" SLOW;
NET "iobits<71>" SLOW;
NET "lad<30>" FAST;
NET "lad<0>" FAST;
NET "lad<1>" FAST;
NET "lad<2>" FAST;
NET "lad<3>" FAST;
NET "lad<4>" FAST;
NET "lad<5>" FAST;
NET "lad<6>" FAST;
NET "lad<7>" FAST;
NET "lad<8>" FAST;
NET "lad<9>" FAST;
NET "lad<10>" FAST;
NET "lad<11>" FAST;
NET "lad<12>" FAST;
NET "lad<13>" FAST;
NET "lad<14>" FAST;
NET "lad<15>" FAST;
NET "lad<16>" FAST;
NET "lad<17>" FAST;
NET "lad<18>" FAST;
NET "lad<19>" FAST;
NET "lad<20>" FAST;
NET "lad<21>" FAST;
NET "lad<22>" FAST;
NET "lad<23>" FAST;
NET "lad<24>" FAST;
NET "lad<25>" FAST;
NET "lad<26>" FAST;
NET "lad<27>" FAST;
NET "lad<28>" FAST;
NET "lad<29>" FAST;
NET "leds<0>" SLOW;
NET "leds<1>" SLOW;
NET "leds<2>" SLOW;
NET "leds<3>" SLOW;
NET "leds<4>" SLOW;
NET "leds<5>" SLOW;
NET "leds<6>" SLOW;
NET "leds<7>" SLOW;
NET "leds<0>" DRIVE = 24;
NET "leds<1>" DRIVE = 24;
NET "leds<2>" DRIVE = 24;
NET "leds<3>" DRIVE = 24;
NET "leds<4>" DRIVE = 24;
NET "leds<5>" DRIVE = 24;
NET "leds<6>" DRIVE = 24;
NET "leds<7>" DRIVE = 24;
NET "iobits<0>" IOSTANDARD = LVTTL;
NET "iobits<1>" IOSTANDARD = LVTTL;
NET "iobits<2>" IOSTANDARD = LVTTL;
NET "iobits<3>" IOSTANDARD = LVTTL;
NET "iobits<4>" IOSTANDARD = LVTTL;
NET "iobits<5>" IOSTANDARD = LVTTL;
NET "iobits<6>" IOSTANDARD = LVTTL;
NET "iobits<7>" IOSTANDARD = LVTTL;
NET "iobits<8>" IOSTANDARD = LVTTL;
NET "iobits<9>" IOSTANDARD = LVTTL;
NET "iobits<10>" IOSTANDARD = LVTTL;
NET "iobits<11>" IOSTANDARD = LVTTL;
NET "iobits<12>" IOSTANDARD = LVTTL;
NET "iobits<13>" IOSTANDARD = LVTTL;
NET "iobits<14>" IOSTANDARD = LVTTL;
NET "iobits<15>" IOSTANDARD = LVTTL;
NET "iobits<16>" IOSTANDARD = LVTTL;
NET "iobits<17>" IOSTANDARD = LVTTL;
NET "iobits<18>" IOSTANDARD = LVTTL;
NET "iobits<19>" IOSTANDARD = LVTTL;
NET "iobits<20>" IOSTANDARD = LVTTL;
NET "iobits<21>" IOSTANDARD = LVTTL;
NET "iobits<22>" IOSTANDARD = LVTTL;
NET "iobits<23>" IOSTANDARD = LVTTL;
NET "iobits<24>" IOSTANDARD = LVTTL;
NET "iobits<25>" IOSTANDARD = LVTTL;
NET "iobits<26>" IOSTANDARD = LVTTL;
NET "iobits<27>" IOSTANDARD = LVTTL;
NET "iobits<28>" IOSTANDARD = LVTTL;
NET "iobits<29>" IOSTANDARD = LVTTL;
NET "iobits<30>" IOSTANDARD = LVTTL;
NET "iobits<31>" IOSTANDARD = LVTTL;
NET "iobits<32>" IOSTANDARD = LVTTL;
NET "iobits<33>" IOSTANDARD = LVTTL;
NET "iobits<34>" IOSTANDARD = LVTTL;
NET "iobits<35>" IOSTANDARD = LVTTL;
NET "iobits<36>" IOSTANDARD = LVTTL;
NET "iobits<37>" IOSTANDARD = LVTTL;
NET "iobits<38>" IOSTANDARD = LVTTL;
NET "iobits<39>" IOSTANDARD = LVTTL;
NET "iobits<40>" IOSTANDARD = LVTTL;
NET "iobits<41>" IOSTANDARD = LVTTL;
NET "iobits<42>" IOSTANDARD = LVTTL;
NET "iobits<43>" IOSTANDARD = LVTTL;
NET "iobits<44>" IOSTANDARD = LVTTL;
NET "iobits<45>" IOSTANDARD = LVTTL;
NET "iobits<46>" IOSTANDARD = LVTTL;
NET "iobits<47>" IOSTANDARD = LVTTL;
NET "iobits<48>" IOSTANDARD = LVTTL;
NET "iobits<49>" IOSTANDARD = LVTTL;
NET "iobits<50>" IOSTANDARD = LVTTL;
NET "iobits<51>" IOSTANDARD = LVTTL;
NET "iobits<52>" IOSTANDARD = LVTTL;
NET "iobits<53>" IOSTANDARD = LVTTL;
NET "iobits<54>" IOSTANDARD = LVTTL;
NET "iobits<55>" IOSTANDARD = LVTTL;
NET "iobits<56>" IOSTANDARD = LVTTL;
NET "iobits<57>" IOSTANDARD = LVTTL;
NET "iobits<58>" IOSTANDARD = LVTTL;
NET "iobits<59>" IOSTANDARD = LVTTL;
NET "iobits<60>" IOSTANDARD = LVTTL;
NET "iobits<61>" IOSTANDARD = LVTTL;
NET "iobits<62>" IOSTANDARD = LVTTL;
NET "iobits<63>" IOSTANDARD = LVTTL;
NET "iobits<64>" IOSTANDARD = LVTTL;
NET "iobits<65>" IOSTANDARD = LVTTL;
NET "iobits<66>" IOSTANDARD = LVTTL;
NET "iobits<67>" IOSTANDARD = LVTTL;
NET "iobits<68>" IOSTANDARD = LVTTL;
NET "iobits<69>" IOSTANDARD = LVTTL;
NET "iobits<70>" IOSTANDARD = LVTTL;
NET "iobits<71>" IOSTANDARD = LVTTL;
NET "lad<0>" IOSTANDARD = LVTTL;
NET "lad<1>" IOSTANDARD = LVTTL;
NET "lad<2>" IOSTANDARD = LVTTL;
NET "lad<3>" IOSTANDARD = LVTTL;
NET "lad<4>" IOSTANDARD = LVTTL;
NET "lad<5>" IOSTANDARD = LVTTL;
NET "lad<6>" IOSTANDARD = LVTTL;
NET "lad<7>" IOSTANDARD = LVTTL;
NET "lad<8>" IOSTANDARD = LVTTL;
NET "lad<9>" IOSTANDARD = LVTTL;
NET "lad<10>" IOSTANDARD = LVTTL;
NET "lad<11>" IOSTANDARD = LVTTL;
NET "lad<12>" IOSTANDARD = LVTTL;
NET "lad<13>" IOSTANDARD = LVTTL;
NET "lad<14>" IOSTANDARD = LVTTL;
NET "lad<15>" IOSTANDARD = LVTTL;
NET "lad<16>" IOSTANDARD = LVTTL;
NET "lad<17>" IOSTANDARD = LVTTL;
NET "lad<18>" IOSTANDARD = LVTTL;
NET "lad<19>" IOSTANDARD = LVTTL;
NET "lad<20>" IOSTANDARD = LVTTL;
NET "lad<21>" IOSTANDARD = LVTTL;
NET "lad<22>" IOSTANDARD = LVTTL;
NET "lad<23>" IOSTANDARD = LVTTL;
NET "lad<24>" IOSTANDARD = LVTTL;
NET "lad<25>" IOSTANDARD = LVTTL;
NET "lad<26>" IOSTANDARD = LVTTL;
NET "lad<27>" IOSTANDARD = LVTTL;
NET "lad<28>" IOSTANDARD = LVTTL;
NET "lad<29>" IOSTANDARD = LVTTL;
NET "lad<30>" IOSTANDARD = LVTTL;
NET "lad<31>" IOSTANDARD = LVTTL;
NET "lad<0>" DRIVE = 8;
NET "lad<1>" DRIVE = 8;
NET "lad<2>" DRIVE = 8;
NET "lad<3>" DRIVE = 8;
NET "lad<4>" DRIVE = 8;
NET "lad<5>" DRIVE = 8;
NET "lad<6>" DRIVE = 8;
NET "lad<7>" DRIVE = 8;
NET "lad<8>" DRIVE = 8;
NET "lad<9>" DRIVE = 8;
NET "lad<10>" DRIVE = 8;
NET "lad<11>" DRIVE = 8;
NET "lad<12>" DRIVE = 8;
NET "lad<13>" DRIVE = 8;
NET "lad<14>" DRIVE = 8;
NET "lad<15>" DRIVE = 8;
NET "lad<16>" DRIVE = 8;
NET "lad<17>" DRIVE = 8;
NET "lad<18>" DRIVE = 8;
NET "lad<19>" DRIVE = 8;
NET "lad<20>" DRIVE = 8;
NET "lad<21>" DRIVE = 8;
NET "lad<22>" DRIVE = 8;
NET "lad<23>" DRIVE = 8;
NET "lad<24>" DRIVE = 8;
NET "lad<25>" DRIVE = 8;
NET "lad<26>" DRIVE = 8;
NET "lad<27>" DRIVE = 8;
NET "lad<28>" DRIVE = 8;
NET "lad<29>" DRIVE = 8;
NET "lad<30>" DRIVE = 8;
NET "lad<31>" DRIVE = 8;
NET "lad<31>" FAST;
TIMESPEC "TS_P2P" = FROM "PADS" TO "PADS" 25 ns;
OFFSET = OUT 20 ns AFTER "lclk";
NET "lw_r" LOC = "p101";
NET "lclk" IOSTANDARD = LVTTL;
NET "leds<0>" IOSTANDARD = LVTTL;
NET "leds<1>" IOSTANDARD = LVTTL;
NET "leds<2>" IOSTANDARD = LVTTL;
NET "leds<3>" IOSTANDARD = LVTTL;
NET "leds<4>" IOSTANDARD = LVTTL;
NET "leds<5>" IOSTANDARD = LVTTL;
NET "leds<6>" IOSTANDARD = LVTTL;
NET "leds<7>" IOSTANDARD = LVTTL;
NET "lrd" IOSTANDARD = LVTTL;
NET "lwr" IOSTANDARD = LVTTL;
NET "lw_r" IOSTANDARD = LVTTL;
NET "ready" IOSTANDARD = LVTTL;
NET "synclk" IOSTANDARD = LVTTL;
NET "ads" IOSTANDARD = LVTTL;
NET "int" IOSTANDARD = LVTTL;
